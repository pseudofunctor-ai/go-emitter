// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pseudofunctor-ai/go-emitter/backends/statsd (interfaces: StatsdClient)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_log.go -package=mocks github.com/pseudofunctor-ai/go-emitter/backends/statsd StatsdClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	statsd "github.com/cactus/go-statsd-client/v5/statsd"
	gomock "go.uber.org/mock/gomock"
)

// MockStatsdClient is a mock of StatsdClient interface.
type MockStatsdClient struct {
	ctrl     *gomock.Controller
	recorder *MockStatsdClientMockRecorder
}

// MockStatsdClientMockRecorder is the mock recorder for MockStatsdClient.
type MockStatsdClientMockRecorder struct {
	mock *MockStatsdClient
}

// NewMockStatsdClient creates a new mock instance.
func NewMockStatsdClient(ctrl *gomock.Controller) *MockStatsdClient {
	mock := &MockStatsdClient{ctrl: ctrl}
	mock.recorder = &MockStatsdClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsdClient) EXPECT() *MockStatsdClientMockRecorder {
	return m.recorder
}

// Gauge mocks base method.
func (m *MockStatsdClient) Gauge(arg0 string, arg1 int64, arg2 float32, arg3 ...statsd.Tag) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Gauge", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Gauge indicates an expected call of Gauge.
func (mr *MockStatsdClientMockRecorder) Gauge(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockStatsdClient)(nil).Gauge), varargs...)
}

// Inc mocks base method.
func (m *MockStatsdClient) Inc(arg0 string, arg1 int64, arg2 float32, arg3 ...statsd.Tag) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Inc", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Inc indicates an expected call of Inc.
func (mr *MockStatsdClientMockRecorder) Inc(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockStatsdClient)(nil).Inc), varargs...)
}

// Timing mocks base method.
func (m *MockStatsdClient) Timing(arg0 string, arg1 int64, arg2 float32, arg3 ...statsd.Tag) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Timing", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Timing indicates an expected call of Timing.
func (mr *MockStatsdClientMockRecorder) Timing(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timing", reflect.TypeOf((*MockStatsdClient)(nil).Timing), varargs...)
}

// TimingDuration mocks base method.
func (m *MockStatsdClient) TimingDuration(arg0 string, arg1 time.Duration, arg2 float32, arg3 ...statsd.Tag) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TimingDuration", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// TimingDuration indicates an expected call of TimingDuration.
func (mr *MockStatsdClientMockRecorder) TimingDuration(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimingDuration", reflect.TypeOf((*MockStatsdClient)(nil).TimingDuration), varargs...)
}
